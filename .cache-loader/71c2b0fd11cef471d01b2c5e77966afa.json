{"remainingRequest":"/Users/gabrielregis/react-spectrum-control-panel/node_modules/thread-loader/dist/cjs.js??ref--7-1!/Users/gabrielregis/react-spectrum-control-panel/node_modules/babel-loader/lib/index.js??ref--7-2!/Users/gabrielregis/react-spectrum-control-panel/src/store/socketStore/index.ts","dependencies":[{"path":"/Users/gabrielregis/react-spectrum-control-panel/src/store/socketStore/index.ts","mtime":1560467078000},{"path":"/Users/gabrielregis/react-spectrum-control-panel/node_modules/cache-loader/dist/cjs.js","mtime":1561315137663},{"path":"/Users/gabrielregis/react-spectrum-control-panel/node_modules/thread-loader/dist/cjs.js","mtime":1561315143281},{"path":"/Users/gabrielregis/react-spectrum-control-panel/node_modules/babel-loader/lib/index.js","mtime":1561315137554}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/gabrielregis/react-spectrum-control-panel/src/store/socketStore/index.ts"],"names":["observable","action","computed","StoreExt","LOCALSTORAGE_KEYS","SOCKER_TYPES","DATA_FORMATS","SocketStore","isSocketIO","socketType","localStorage","getItem","SOCKET_TYPE","DATA_FORMAT","NOT_SUPPORT_POLLING","type","dataFormat","socketIsConnected","messages","message","time","Date","getTime","push","val","notSupportPolling","setItem","String"],"mappings":";;;;;;;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,QAA6C,MAA7C;AAEA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,mBAA3C;AAEA;;;;;;;;AAOA,WAAaC,WAAb,sBAAO,MAAMA,WAAN,SAA0BJ,QAA1B,CAAmC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AActC,MACIK,UADJ,GACiB;AACb,WAAO,KAAKC,UAAL,KAAoBJ,YAAY,CAAC,CAAD,CAAvC;AACH;;AAjBqC,CAA1C,oFACKL,UADL;AAAA;AAAA;AAAA;AAAA;AAAA,WAGSU,YAAY,CAACC,OAAb,CAAqBP,iBAAiB,CAACQ,WAAvC,CAAD,IAAoFP,YAAY,CAAC,CAAD,CAHxG;AAAA;AAAA,8EAIKL,UAJL;AAAA;AAAA;AAAA;AAAA;AAAA,WAMSU,YAAY,CAACC,OAAb,CAAqBP,iBAAiB,CAACS,WAAvC,CAAD,IAAwFP,YAAY,CAAC,CAAD,CAN5G;AAAA;AAAA,qFAOKN,UAPL;AAAA;AAAA;AAAA;AAAA;AAAA,WAQiC,KARjC;AAAA;AAAA,4EASKA,UATL;AAAA;AAAA;AAAA;AAAA;AAAA,WAUuC,EAVvC;AAAA;AAAA,qFAWKA,UAXL;AAAA;AAAA;AAAA;AAAA;AAAA,WAYiCU,YAAY,CAACC,OAAb,CAAqBP,iBAAiB,CAACU,mBAAvC,MAAgE,MAZjG;AAAA;AAAA,+DAcKZ,QAdL,oKAmBKD,MAnBL;AAAA;AAAA;AAAA;AAAA;AAAA,WAoBqBc,IAAD,IAAmC;AAC/C,WAAKN,UAAL,GAAkBM,IAAlB;AACH,KAtBL;AAAA;AAAA,iFAwBKd,MAxBL;AAAA;AAAA;AAAA;AAAA;AAAA,WAyBqBe,UAAD,IAA6C;AACzD,WAAKA,UAAL,GAAkBA,UAAlB;AACH,KA3BL;AAAA;AAAA,wFA6BKf,MA7BL;AAAA;AAAA;AAAA;AAAA;AAAA,WA8B4BgB,iBAAD,IAAgC;AACnD,WAAKA,iBAAL,GAAyBA,iBAAzB;AACH,KAhCL;AAAA;AAAA,iFAkCKhB,MAlCL;AAAA;AAAA;AAAA;AAAA;AAAA,WAmCoB,MAAM;AAClB,WAAKiB,QAAL,GAAgB,EAAhB;AACH,KArCL;AAAA;AAAA,+EAuCKjB,MAvCL;AAAA;AAAA;AAAA;AAAA;AAAA,WAwCkBkB,OAAD,IAAmC;AAC5C,UAAI,CAACA,OAAO,CAACC,IAAb,EAAmB;AACfD,QAAAA,OAAO,CAACC,IAAR,GAAe,IAAIC,IAAJ,GAAWC,OAAX,EAAf;AACH;;AACD,WAAKJ,QAAL,CAAcK,IAAd,CAAmBJ,OAAnB;AACH,KA7CL;AAAA;AAAA,yFA+CKlB,MA/CL;AAAA;AAAA;AAAA;AAAA;AAAA,WAgD4BuB,GAAD,IAAkB;AACrC,WAAKC,iBAAL,GAAyBD,GAAzB;AACAd,MAAAA,YAAY,CAACgB,OAAb,CAAqBtB,iBAAiB,CAACU,mBAAvC,EAA4Da,MAAM,CAACH,GAAD,CAAlE;AACH,KAnDL;AAAA;AAAA;AAsDA,eAAe,IAAIjB,WAAJ,EAAf","sourcesContent":["import { observable, action, computed } from 'mobx'\n\nimport { StoreExt } from '@utils/reactExt'\nimport { LOCALSTORAGE_KEYS } from '@constants/index'\nimport { SOCKER_TYPES, DATA_FORMATS } from '@constants/socket'\n\n/**\n * socket debugger store\n *\n * @export\n * @class SocketStore\n * @extends {StoreExt}\n */\nexport class SocketStore extends StoreExt {\n    @observable\n    socketType: ISocketStore.SocketType =\n        (localStorage.getItem(LOCALSTORAGE_KEYS.SOCKET_TYPE) as ISocketStore.SocketType) || SOCKER_TYPES[0]\n    @observable\n    dataFormat: ISocketStore.DataFormatType =\n        (localStorage.getItem(LOCALSTORAGE_KEYS.DATA_FORMAT) as ISocketStore.DataFormatType) || DATA_FORMATS[0]\n    @observable\n    socketIsConnected: boolean = false\n    @observable\n    messages: ISocketStore.Message[] = []\n    @observable\n    notSupportPolling: boolean = localStorage.getItem(LOCALSTORAGE_KEYS.NOT_SUPPORT_POLLING) === 'true'\n\n    @computed\n    get isSocketIO() {\n        return this.socketType === SOCKER_TYPES[0]\n    }\n\n    @action\n    setSocketType = (type: ISocketStore.SocketType) => {\n        this.socketType = type\n    }\n\n    @action\n    setDataFormat = (dataFormat: ISocketStore.DataFormatType) => {\n        this.dataFormat = dataFormat\n    }\n\n    @action\n    setSocketIsConnected = (socketIsConnected: boolean) => {\n        this.socketIsConnected = socketIsConnected\n    }\n\n    @action\n    clearMessages = () => {\n        this.messages = []\n    }\n\n    @action\n    addMessage = (message: ISocketStore.Message) => {\n        if (!message.time) {\n            message.time = new Date().getTime()\n        }\n        this.messages.push(message)\n    }\n\n    @action\n    setNotSupportPolling = (val: boolean) => {\n        this.notSupportPolling = val\n        localStorage.setItem(LOCALSTORAGE_KEYS.NOT_SUPPORT_POLLING, String(val))\n    }\n}\n\nexport default new SocketStore()\n"]}]}